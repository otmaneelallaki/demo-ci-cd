name: AWS Lambda Deploy

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # trigger manually -âˆ«

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      ECR_IMAGE_TAG: latest
      AWS_DEFAULT_REGION: eu-west-3

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker-demo
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to AWS lambda.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }} .
    
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }}
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }}"
    - name: Deploy to AWS Lambda
      run: |
        aws lambda update-function-code \
        --function-name ${{ env.AWS_LAMBDA_FUNC_NAME }} \
        --image-uri "${{ secrets.AWS_ECR_IMAGE_URI }}"
      env:
        AWS_LAMBDA_FUNC_NAME: lambda-docker
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
